require "../config"
require "../system/lib"
@[Link("voidcsfml-audio")]
lib VoidCSFML
  fun listener_setglobalvolume_Bw9(volume : LibC::Float)
  fun listener_getglobalvolume(result : LibC::Float*)
  fun listener_setposition_Bw9Bw9Bw9(x : LibC::Float, y : LibC::Float, z : LibC::Float)
  fun listener_setposition_NzM(position : Void*)
  fun listener_getposition(result : Void*)
  fun listener_setdirection_Bw9Bw9Bw9(x : LibC::Float, y : LibC::Float, z : LibC::Float)
  fun listener_setdirection_NzM(direction : Void*)
  fun listener_getdirection(result : Void*)
  fun listener_setupvector_Bw9Bw9Bw9(x : LibC::Float, y : LibC::Float, z : LibC::Float)
  fun listener_setupvector_NzM(up_vector : Void*)
  fun listener_getupvector(result : Void*)
  fun soundsource_finalize(self : Void*)
  fun soundsource_setpitch_Bw9(self : Void*, pitch : LibC::Float)
  fun soundsource_setvolume_Bw9(self : Void*, volume : LibC::Float)
  fun soundsource_setposition_Bw9Bw9Bw9(self : Void*, x : LibC::Float, y : LibC::Float, z : LibC::Float)
  fun soundsource_setposition_NzM(self : Void*, position : Void*)
  fun soundsource_setrelativetolistener_GZq(self : Void*, relative : Bool)
  fun soundsource_setmindistance_Bw9(self : Void*, distance : LibC::Float)
  fun soundsource_setattenuation_Bw9(self : Void*, attenuation : LibC::Float)
  fun soundsource_getpitch(self : Void*, result : LibC::Float*)
  fun soundsource_getvolume(self : Void*, result : LibC::Float*)
  fun soundsource_getposition(self : Void*, result : Void*)
  fun soundsource_isrelativetolistener(self : Void*, result : Bool*)
  fun soundsource_getmindistance(self : Void*, result : LibC::Float*)
  fun soundsource_getattenuation(self : Void*, result : LibC::Float*)
  $soundstream_ongetdata_callback : Void*, Int16*, LibC::SizeT, Bool* ->
  $soundstream_onseek_callback : Void*, Void* ->
  fun soundstream_finalize(self : Void*)
  fun soundstream_play(self : Void*)
  fun soundstream_pause(self : Void*)
  fun soundstream_stop(self : Void*)
  fun soundstream_getchannelcount(self : Void*, result : LibC::UInt*)
  fun soundstream_getsamplerate(self : Void*, result : LibC::UInt*)
  fun soundstream_getstatus(self : Void*, result : LibC::Int*)
  fun soundstream_setplayingoffset_f4T(self : Void*, time_offset : Void*)
  fun soundstream_getplayingoffset(self : Void*, result : Void*)
  fun soundstream_setloop_GZq(self : Void*, loop : Bool)
  fun soundstream_getloop(self : Void*, result : Bool*)
  fun soundstream_initialize(self : Void*)
  fun soundstream_initialize_emSemS(self : Void*, channel_count : LibC::UInt, sample_rate : LibC::UInt)
  fun soundstream_setpitch_Bw9(self : Void*, pitch : LibC::Float)
  fun soundstream_setvolume_Bw9(self : Void*, volume : LibC::Float)
  fun soundstream_setposition_Bw9Bw9Bw9(self : Void*, x : LibC::Float, y : LibC::Float, z : LibC::Float)
  fun soundstream_setposition_NzM(self : Void*, position : Void*)
  fun soundstream_setrelativetolistener_GZq(self : Void*, relative : Bool)
  fun soundstream_setmindistance_Bw9(self : Void*, distance : LibC::Float)
  fun soundstream_setattenuation_Bw9(self : Void*, attenuation : LibC::Float)
  fun soundstream_getpitch(self : Void*, result : LibC::Float*)
  fun soundstream_getvolume(self : Void*, result : LibC::Float*)
  fun soundstream_getposition(self : Void*, result : Void*)
  fun soundstream_isrelativetolistener(self : Void*, result : Bool*)
  fun soundstream_getmindistance(self : Void*, result : LibC::Float*)
  fun soundstream_getattenuation(self : Void*, result : LibC::Float*)
  fun music_initialize(self : Void*)
  fun music_finalize(self : Void*)
  fun music_openfromfile_zkC(self : Void*, filename_size : LibC::SizeT, filename : LibC::Char*, result : Bool*)
  fun music_openfrommemory_5h8vgv(self : Void*, data : UInt8*, size_in_bytes : LibC::SizeT, result : Bool*)
  fun music_openfromstream_PO0(self : Void*, stream : Void*, result : Bool*)
  fun music_getduration(self : Void*, result : Void*)
  fun music_play(self : Void*)
  fun music_pause(self : Void*)
  fun music_stop(self : Void*)
  fun music_getchannelcount(self : Void*, result : LibC::UInt*)
  fun music_getsamplerate(self : Void*, result : LibC::UInt*)
  fun music_getstatus(self : Void*, result : LibC::Int*)
  fun music_setplayingoffset_f4T(self : Void*, time_offset : Void*)
  fun music_getplayingoffset(self : Void*, result : Void*)
  fun music_setloop_GZq(self : Void*, loop : Bool)
  fun music_getloop(self : Void*, result : Bool*)
  fun music_setpitch_Bw9(self : Void*, pitch : LibC::Float)
  fun music_setvolume_Bw9(self : Void*, volume : LibC::Float)
  fun music_setposition_Bw9Bw9Bw9(self : Void*, x : LibC::Float, y : LibC::Float, z : LibC::Float)
  fun music_setposition_NzM(self : Void*, position : Void*)
  fun music_setrelativetolistener_GZq(self : Void*, relative : Bool)
  fun music_setmindistance_Bw9(self : Void*, distance : LibC::Float)
  fun music_setattenuation_Bw9(self : Void*, attenuation : LibC::Float)
  fun music_getpitch(self : Void*, result : LibC::Float*)
  fun music_getvolume(self : Void*, result : LibC::Float*)
  fun music_getposition(self : Void*, result : Void*)
  fun music_isrelativetolistener(self : Void*, result : Bool*)
  fun music_getmindistance(self : Void*, result : LibC::Float*)
  fun music_getattenuation(self : Void*, result : LibC::Float*)
  fun sound_initialize(self : Void*)
  fun sound_initialize_mWu(self : Void*, buffer : Void*)
  fun sound_finalize(self : Void*)
  fun sound_play(self : Void*)
  fun sound_pause(self : Void*)
  fun sound_stop(self : Void*)
  fun sound_setbuffer_mWu(self : Void*, buffer : Void*)
  fun sound_setloop_GZq(self : Void*, loop : Bool)
  fun sound_setplayingoffset_f4T(self : Void*, time_offset : Void*)
  fun sound_getbuffer(self : Void*, result : Void**)
  fun sound_getloop(self : Void*, result : Bool*)
  fun sound_getplayingoffset(self : Void*, result : Void*)
  fun sound_getstatus(self : Void*, result : LibC::Int*)
  fun sound_resetbuffer(self : Void*)
  fun sound_setpitch_Bw9(self : Void*, pitch : LibC::Float)
  fun sound_setvolume_Bw9(self : Void*, volume : LibC::Float)
  fun sound_setposition_Bw9Bw9Bw9(self : Void*, x : LibC::Float, y : LibC::Float, z : LibC::Float)
  fun sound_setposition_NzM(self : Void*, position : Void*)
  fun sound_setrelativetolistener_GZq(self : Void*, relative : Bool)
  fun sound_setmindistance_Bw9(self : Void*, distance : LibC::Float)
  fun sound_setattenuation_Bw9(self : Void*, attenuation : LibC::Float)
  fun sound_getpitch(self : Void*, result : LibC::Float*)
  fun sound_getvolume(self : Void*, result : LibC::Float*)
  fun sound_getposition(self : Void*, result : Void*)
  fun sound_isrelativetolistener(self : Void*, result : Bool*)
  fun sound_getmindistance(self : Void*, result : LibC::Float*)
  fun sound_getattenuation(self : Void*, result : LibC::Float*)
  fun soundbuffer_initialize(self : Void*)
  fun soundbuffer_finalize(self : Void*)
  fun soundbuffer_loadfromfile_zkC(self : Void*, filename_size : LibC::SizeT, filename : LibC::Char*, result : Bool*)
  fun soundbuffer_loadfrommemory_5h8vgv(self : Void*, data : UInt8*, size_in_bytes : LibC::SizeT, result : Bool*)
  fun soundbuffer_loadfromstream_PO0(self : Void*, stream : Void*, result : Bool*)
  fun soundbuffer_loadfromsamples_xzLJvtemSemS(self : Void*, samples : Int16*, sample_count : UInt64, channel_count : LibC::UInt, sample_rate : LibC::UInt, result : Bool*)
  fun soundbuffer_savetofile_zkC(self : Void*, filename_size : LibC::SizeT, filename : LibC::Char*, result : Bool*)
  fun soundbuffer_getsamples(self : Void*, result : Int16**)
  fun soundbuffer_getsamplecount(self : Void*, result : UInt64*)
  fun soundbuffer_getsamplerate(self : Void*, result : LibC::UInt*)
  fun soundbuffer_getchannelcount(self : Void*, result : LibC::UInt*)
  fun soundbuffer_getduration(self : Void*, result : Void*)
  $soundrecorder_onstart_callback : Void*, Bool* ->
  $soundrecorder_onprocesssamples_callback : Void*, Int16*, LibC::SizeT, Bool* ->
  $soundrecorder_onstop_callback : Void* ->
  fun soundrecorder_finalize(self : Void*)
  fun soundrecorder_start_emS(self : Void*, sample_rate : LibC::UInt, result : Bool*)
  fun soundrecorder_stop(self : Void*)
  fun soundrecorder_getsamplerate(self : Void*, result : LibC::UInt*)
  fun soundrecorder_getavailabledevices(result : LibC::Char***, result_size : LibC::SizeT*)
  fun soundrecorder_getdefaultdevice(result : LibC::Char**)
  fun soundrecorder_setdevice_zkC(self : Void*, name_size : LibC::SizeT, name : LibC::Char*, result : Bool*)
  fun soundrecorder_getdevice(self : Void*, result : LibC::Char**)
  fun soundrecorder_isavailable(result : Bool*)
  fun soundrecorder_initialize(self : Void*)
  fun soundrecorder_setprocessinginterval_f4T(self : Void*, interval : Void*)
  fun soundrecorder_onstart(self : Void*, result : Bool*)
  fun soundrecorder_onstop(self : Void*)
  fun soundbufferrecorder_initialize(self : Void*)
  fun soundbufferrecorder_getbuffer(self : Void*, result : Void**)
  fun soundbufferrecorder_start_emS(self : Void*, sample_rate : LibC::UInt, result : Bool*)
  fun soundbufferrecorder_stop(self : Void*)
  fun soundbufferrecorder_getsamplerate(self : Void*, result : LibC::UInt*)
  fun soundbufferrecorder_getavailabledevices(result : LibC::Char***, result_size : LibC::SizeT*)
  fun soundbufferrecorder_getdefaultdevice(result : LibC::Char**)
  fun soundbufferrecorder_setdevice_zkC(self : Void*, name_size : LibC::SizeT, name : LibC::Char*, result : Bool*)
  fun soundbufferrecorder_getdevice(self : Void*, result : LibC::Char**)
  fun soundbufferrecorder_isavailable(result : Bool*)
  fun sfml_audio_version(LibC::Int*, LibC::Int*, LibC::Int*)
end
