#ifndef VOIDCSFML_AUDIO_H
#define VOIDCSFML_AUDIO_H
#include <voidcsfml/system.h>
#include <voidcsfml/config.h>
VOIDCSFML_API sfml_audio_version(int*, int*, int*);
VOIDCSFML_API listener_setglobalvolume_Bw9(float volume);
VOIDCSFML_API listener_getglobalvolume(float* result);
VOIDCSFML_API listener_setposition_Bw9Bw9Bw9(float x, float y, float z);
VOIDCSFML_API listener_setposition_NzM(void* position);
VOIDCSFML_API listener_getposition(void* result);
VOIDCSFML_API listener_setdirection_Bw9Bw9Bw9(float x, float y, float z);
VOIDCSFML_API listener_setdirection_NzM(void* direction);
VOIDCSFML_API listener_getdirection(void* result);
VOIDCSFML_API listener_setupvector_Bw9Bw9Bw9(float x, float y, float z);
VOIDCSFML_API listener_setupvector_NzM(void* up_vector);
VOIDCSFML_API listener_getupvector(void* result);
VOIDCSFML_API soundsource_finalize(void* self);
VOIDCSFML_API soundsource_setpitch_Bw9(void* self, float pitch);
VOIDCSFML_API soundsource_setvolume_Bw9(void* self, float volume);
VOIDCSFML_API soundsource_setposition_Bw9Bw9Bw9(void* self, float x, float y, float z);
VOIDCSFML_API soundsource_setposition_NzM(void* self, void* position);
VOIDCSFML_API soundsource_setrelativetolistener_GZq(void* self, unsigned char relative);
VOIDCSFML_API soundsource_setmindistance_Bw9(void* self, float distance);
VOIDCSFML_API soundsource_setattenuation_Bw9(void* self, float attenuation);
VOIDCSFML_API soundsource_getpitch(void* self, float* result);
VOIDCSFML_API soundsource_getvolume(void* self, float* result);
VOIDCSFML_API soundsource_getposition(void* self, void* result);
VOIDCSFML_API soundsource_isrelativetolistener(void* self, unsigned char* result);
VOIDCSFML_API soundsource_getmindistance(void* self, float* result);
VOIDCSFML_API soundsource_getattenuation(void* self, float* result);
VOIDCSFML_API (*soundstream_ongetdata_callback)(void*, int16_t**, size_t*, unsigned char*);
VOIDCSFML_API (*soundstream_onseek_callback)(void*, void*);
VOIDCSFML_API soundstream_finalize(void* self);
VOIDCSFML_API soundstream_play(void* self);
VOIDCSFML_API soundstream_pause(void* self);
VOIDCSFML_API soundstream_stop(void* self);
VOIDCSFML_API soundstream_getchannelcount(void* self, unsigned int* result);
VOIDCSFML_API soundstream_getsamplerate(void* self, unsigned int* result);
VOIDCSFML_API soundstream_getstatus(void* self, int* result);
VOIDCSFML_API soundstream_setplayingoffset_f4T(void* self, void* time_offset);
VOIDCSFML_API soundstream_getplayingoffset(void* self, void* result);
VOIDCSFML_API soundstream_setloop_GZq(void* self, unsigned char loop);
VOIDCSFML_API soundstream_getloop(void* self, unsigned char* result);
VOIDCSFML_API soundstream_initialize(void* self);
VOIDCSFML_API soundstream_initialize_emSemS(void* self, unsigned int channel_count, unsigned int sample_rate);
VOIDCSFML_API soundstream_setpitch_Bw9(void* self, float pitch);
VOIDCSFML_API soundstream_setvolume_Bw9(void* self, float volume);
VOIDCSFML_API soundstream_setposition_Bw9Bw9Bw9(void* self, float x, float y, float z);
VOIDCSFML_API soundstream_setposition_NzM(void* self, void* position);
VOIDCSFML_API soundstream_setrelativetolistener_GZq(void* self, unsigned char relative);
VOIDCSFML_API soundstream_setmindistance_Bw9(void* self, float distance);
VOIDCSFML_API soundstream_setattenuation_Bw9(void* self, float attenuation);
VOIDCSFML_API soundstream_getpitch(void* self, float* result);
VOIDCSFML_API soundstream_getvolume(void* self, float* result);
VOIDCSFML_API soundstream_getposition(void* self, void* result);
VOIDCSFML_API soundstream_isrelativetolistener(void* self, unsigned char* result);
VOIDCSFML_API soundstream_getmindistance(void* self, float* result);
VOIDCSFML_API soundstream_getattenuation(void* self, float* result);
VOIDCSFML_API music_initialize(void* self);
VOIDCSFML_API music_finalize(void* self);
VOIDCSFML_API music_openfromfile_zkC(void* self, size_t filename_size, char* filename, unsigned char* result);
VOIDCSFML_API music_openfrommemory_5h8vgv(void* self, void* data, size_t size_in_bytes, unsigned char* result);
VOIDCSFML_API music_openfromstream_PO0(void* self, void* stream, unsigned char* result);
VOIDCSFML_API music_getduration(void* self, void* result);
VOIDCSFML_API music_play(void* self);
VOIDCSFML_API music_pause(void* self);
VOIDCSFML_API music_stop(void* self);
VOIDCSFML_API music_getchannelcount(void* self, unsigned int* result);
VOIDCSFML_API music_getsamplerate(void* self, unsigned int* result);
VOIDCSFML_API music_getstatus(void* self, int* result);
VOIDCSFML_API music_setplayingoffset_f4T(void* self, void* time_offset);
VOIDCSFML_API music_getplayingoffset(void* self, void* result);
VOIDCSFML_API music_setloop_GZq(void* self, unsigned char loop);
VOIDCSFML_API music_getloop(void* self, unsigned char* result);
VOIDCSFML_API music_setpitch_Bw9(void* self, float pitch);
VOIDCSFML_API music_setvolume_Bw9(void* self, float volume);
VOIDCSFML_API music_setposition_Bw9Bw9Bw9(void* self, float x, float y, float z);
VOIDCSFML_API music_setposition_NzM(void* self, void* position);
VOIDCSFML_API music_setrelativetolistener_GZq(void* self, unsigned char relative);
VOIDCSFML_API music_setmindistance_Bw9(void* self, float distance);
VOIDCSFML_API music_setattenuation_Bw9(void* self, float attenuation);
VOIDCSFML_API music_getpitch(void* self, float* result);
VOIDCSFML_API music_getvolume(void* self, float* result);
VOIDCSFML_API music_getposition(void* self, void* result);
VOIDCSFML_API music_isrelativetolistener(void* self, unsigned char* result);
VOIDCSFML_API music_getmindistance(void* self, float* result);
VOIDCSFML_API music_getattenuation(void* self, float* result);
VOIDCSFML_API sound_initialize(void* self);
VOIDCSFML_API sound_initialize_mWu(void* self, void* buffer);
VOIDCSFML_API sound_finalize(void* self);
VOIDCSFML_API sound_play(void* self);
VOIDCSFML_API sound_pause(void* self);
VOIDCSFML_API sound_stop(void* self);
VOIDCSFML_API sound_setbuffer_mWu(void* self, void* buffer);
VOIDCSFML_API sound_setloop_GZq(void* self, unsigned char loop);
VOIDCSFML_API sound_setplayingoffset_f4T(void* self, void* time_offset);
VOIDCSFML_API sound_getbuffer(void* self, void** result);
VOIDCSFML_API sound_getloop(void* self, unsigned char* result);
VOIDCSFML_API sound_getplayingoffset(void* self, void* result);
VOIDCSFML_API sound_getstatus(void* self, int* result);
VOIDCSFML_API sound_resetbuffer(void* self);
VOIDCSFML_API sound_setpitch_Bw9(void* self, float pitch);
VOIDCSFML_API sound_setvolume_Bw9(void* self, float volume);
VOIDCSFML_API sound_setposition_Bw9Bw9Bw9(void* self, float x, float y, float z);
VOIDCSFML_API sound_setposition_NzM(void* self, void* position);
VOIDCSFML_API sound_setrelativetolistener_GZq(void* self, unsigned char relative);
VOIDCSFML_API sound_setmindistance_Bw9(void* self, float distance);
VOIDCSFML_API sound_setattenuation_Bw9(void* self, float attenuation);
VOIDCSFML_API sound_getpitch(void* self, float* result);
VOIDCSFML_API sound_getvolume(void* self, float* result);
VOIDCSFML_API sound_getposition(void* self, void* result);
VOIDCSFML_API sound_isrelativetolistener(void* self, unsigned char* result);
VOIDCSFML_API sound_getmindistance(void* self, float* result);
VOIDCSFML_API sound_getattenuation(void* self, float* result);
VOIDCSFML_API soundbuffer_initialize(void* self);
VOIDCSFML_API soundbuffer_finalize(void* self);
VOIDCSFML_API soundbuffer_loadfromfile_zkC(void* self, size_t filename_size, char* filename, unsigned char* result);
VOIDCSFML_API soundbuffer_loadfrommemory_5h8vgv(void* self, void* data, size_t size_in_bytes, unsigned char* result);
VOIDCSFML_API soundbuffer_loadfromstream_PO0(void* self, void* stream, unsigned char* result);
VOIDCSFML_API soundbuffer_loadfromsamples_xzLJvtemSemS(void* self, int16_t* samples, uint64_t sample_count, unsigned int channel_count, unsigned int sample_rate, unsigned char* result);
VOIDCSFML_API soundbuffer_savetofile_zkC(void* self, size_t filename_size, char* filename, unsigned char* result);
VOIDCSFML_API soundbuffer_getsamples(void* self, int16_t** result);
VOIDCSFML_API soundbuffer_getsamplecount(void* self, uint64_t* result);
VOIDCSFML_API soundbuffer_getsamplerate(void* self, unsigned int* result);
VOIDCSFML_API soundbuffer_getchannelcount(void* self, unsigned int* result);
VOIDCSFML_API soundbuffer_getduration(void* self, void* result);
VOIDCSFML_API (*soundrecorder_onstart_callback)(void*, unsigned char*);
VOIDCSFML_API (*soundrecorder_onprocesssamples_callback)(void*, int16_t*, size_t, unsigned char*);
VOIDCSFML_API (*soundrecorder_onstop_callback)(void*);
VOIDCSFML_API soundrecorder_finalize(void* self);
VOIDCSFML_API soundrecorder_start_emS(void* self, unsigned int sample_rate, unsigned char* result);
VOIDCSFML_API soundrecorder_stop(void* self);
VOIDCSFML_API soundrecorder_getsamplerate(void* self, unsigned int* result);
VOIDCSFML_API soundrecorder_getavailabledevices(char*** result, size_t* result_size);
VOIDCSFML_API soundrecorder_getdefaultdevice(char** result);
VOIDCSFML_API soundrecorder_setdevice_zkC(void* self, size_t name_size, char* name, unsigned char* result);
VOIDCSFML_API soundrecorder_getdevice(void* self, char** result);
VOIDCSFML_API soundrecorder_isavailable(unsigned char* result);
VOIDCSFML_API soundrecorder_initialize(void* self);
VOIDCSFML_API soundrecorder_setprocessinginterval_f4T(void* self, void* interval);
VOIDCSFML_API soundrecorder_onstart(void* self, unsigned char* result);
VOIDCSFML_API soundrecorder_onstop(void* self);
VOIDCSFML_API soundbufferrecorder_initialize(void* self);
VOIDCSFML_API soundbufferrecorder_getbuffer(void* self, void** result);
VOIDCSFML_API soundbufferrecorder_start_emS(void* self, unsigned int sample_rate, unsigned char* result);
VOIDCSFML_API soundbufferrecorder_stop(void* self);
VOIDCSFML_API soundbufferrecorder_getsamplerate(void* self, unsigned int* result);
VOIDCSFML_API soundbufferrecorder_getavailabledevices(char*** result, size_t* result_size);
VOIDCSFML_API soundbufferrecorder_getdefaultdevice(char** result);
VOIDCSFML_API soundbufferrecorder_setdevice_zkC(void* self, size_t name_size, char* name, unsigned char* result);
VOIDCSFML_API soundbufferrecorder_getdevice(void* self, char** result);
VOIDCSFML_API soundbufferrecorder_isavailable(unsigned char* result);
#endif
