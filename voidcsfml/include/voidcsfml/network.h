#ifndef VOIDCSFML_NETWORK_H
#define VOIDCSFML_NETWORK_H
#include <voidcsfml/system.h>
#include <voidcsfml/config.h>
VOIDCSFML_API sfml_network_version(int*, int*, int*);
VOIDCSFML_API socket_finalize(void* self);
VOIDCSFML_API socket_setblocking_GZq(void* self, unsigned char blocking);
VOIDCSFML_API socket_isblocking(void* self, unsigned char* result);
VOIDCSFML_API tcpsocket_initialize(void* self);
VOIDCSFML_API tcpsocket_getlocalport(void* self, unsigned short* result);
VOIDCSFML_API tcpsocket_getremoteaddress(void* self, void* result);
VOIDCSFML_API tcpsocket_getremoteport(void* self, unsigned short* result);
VOIDCSFML_API tcpsocket_connect_BfEbxif4T(void* self, void* remote_address, unsigned short remote_port, void* timeout, int* result);
VOIDCSFML_API tcpsocket_disconnect(void* self);
VOIDCSFML_API tcpsocket_send_5h8vgv(void* self, void* data, size_t size, int* result);
VOIDCSFML_API tcpsocket_send_5h8vgvi49(void* self, void* data, size_t size, size_t* sent, int* result);
VOIDCSFML_API tcpsocket_receive_xALvgvi49(void* self, void* data, size_t size, size_t* received, int* result);
VOIDCSFML_API tcpsocket_send_jyF(void* self, void* packet, int* result);
VOIDCSFML_API tcpsocket_receive_jyF(void* self, void* packet, int* result);
VOIDCSFML_API tcpsocket_setblocking_GZq(void* self, unsigned char blocking);
VOIDCSFML_API tcpsocket_isblocking(void* self, unsigned char* result);
VOIDCSFML_API ftp_initialize(void* self);
VOIDCSFML_API ftp_response_initialize_nyWzkC(void* self, int code, size_t message_size, char* message);
VOIDCSFML_API ftp_response_isok(void* self, unsigned char* result);
VOIDCSFML_API ftp_response_getstatus(void* self, int* result);
VOIDCSFML_API ftp_response_getmessage(void* self, char** result);
VOIDCSFML_API ftp_response_initialize_lXv(void* self, void* copy);
VOIDCSFML_API ftp_directoryresponse_initialize_lXv(void* self, void* response);
VOIDCSFML_API ftp_directoryresponse_getdirectory(void* self, char** result);
VOIDCSFML_API ftp_directoryresponse_isok(void* self, unsigned char* result);
VOIDCSFML_API ftp_directoryresponse_getstatus(void* self, int* result);
VOIDCSFML_API ftp_directoryresponse_getmessage(void* self, char** result);
VOIDCSFML_API ftp_directoryresponse_initialize_Zyp(void* self, void* copy);
VOIDCSFML_API ftp_listingresponse_initialize_lXvzkC(void* self, void* response, size_t data_size, char* data);
VOIDCSFML_API ftp_listingresponse_getlisting(void* self, char*** result, size_t* result_size);
VOIDCSFML_API ftp_listingresponse_isok(void* self, unsigned char* result);
VOIDCSFML_API ftp_listingresponse_getstatus(void* self, int* result);
VOIDCSFML_API ftp_listingresponse_getmessage(void* self, char** result);
VOIDCSFML_API ftp_listingresponse_initialize_2ho(void* self, void* copy);
VOIDCSFML_API ftp_finalize(void* self);
VOIDCSFML_API ftp_connect_BfEbxif4T(void* self, void* server, unsigned short port, void* timeout, void* result);
VOIDCSFML_API ftp_disconnect(void* self, void* result);
VOIDCSFML_API ftp_login(void* self, void* result);
VOIDCSFML_API ftp_login_zkCzkC(void* self, size_t name_size, char* name, size_t password_size, char* password, void* result);
VOIDCSFML_API ftp_keepalive(void* self, void* result);
VOIDCSFML_API ftp_getworkingdirectory(void* self, void* result);
VOIDCSFML_API ftp_getdirectorylisting_zkC(void* self, size_t directory_size, char* directory, void* result);
VOIDCSFML_API ftp_changedirectory_zkC(void* self, size_t directory_size, char* directory, void* result);
VOIDCSFML_API ftp_parentdirectory(void* self, void* result);
VOIDCSFML_API ftp_createdirectory_zkC(void* self, size_t name_size, char* name, void* result);
VOIDCSFML_API ftp_deletedirectory_zkC(void* self, size_t name_size, char* name, void* result);
VOIDCSFML_API ftp_renamefile_zkCzkC(void* self, size_t file_size, char* file, size_t new_name_size, char* new_name, void* result);
VOIDCSFML_API ftp_deletefile_zkC(void* self, size_t name_size, char* name, void* result);
VOIDCSFML_API ftp_download_zkCzkCJP8(void* self, size_t remote_file_size, char* remote_file, size_t local_path_size, char* local_path, int mode, void* result);
VOIDCSFML_API ftp_upload_zkCzkCJP8(void* self, size_t local_file_size, char* local_file, size_t remote_path_size, char* remote_path, int mode, void* result);
VOIDCSFML_API ftp_sendcommand_zkCzkC(void* self, size_t command_size, char* command, size_t parameter_size, char* parameter, void* result);
VOIDCSFML_API ipaddress_initialize(void* self);
VOIDCSFML_API ipaddress_initialize_zkC(void* self, size_t address_size, char* address);
VOIDCSFML_API ipaddress_initialize_Yy6(void* self, char* address);
VOIDCSFML_API ipaddress_initialize_9yU9yU9yU9yU(void* self, uint8_t byte0, uint8_t byte1, uint8_t byte2, uint8_t byte3);
VOIDCSFML_API ipaddress_initialize_saL(void* self, uint32_t address);
VOIDCSFML_API ipaddress_tostring(void* self, char** result);
VOIDCSFML_API ipaddress_tointeger(void* self, uint32_t* result);
VOIDCSFML_API ipaddress_getlocaladdress(void* result);
VOIDCSFML_API ipaddress_getpublicaddress_f4T(void* timeout, void* result);
VOIDCSFML_API operator_eq_BfEBfE(void* left, void* right, unsigned char* result);
VOIDCSFML_API operator_ne_BfEBfE(void* left, void* right, unsigned char* result);
VOIDCSFML_API operator_lt_BfEBfE(void* left, void* right, unsigned char* result);
VOIDCSFML_API operator_gt_BfEBfE(void* left, void* right, unsigned char* result);
VOIDCSFML_API operator_le_BfEBfE(void* left, void* right, unsigned char* result);
VOIDCSFML_API operator_ge_BfEBfE(void* left, void* right, unsigned char* result);
VOIDCSFML_API ipaddress_initialize_BfE(void* self, void* copy);
VOIDCSFML_API http_request_initialize_zkC1ctzkC(void* self, size_t uri_size, char* uri, int method, size_t body_size, char* body);
VOIDCSFML_API http_request_setfield_zkCzkC(void* self, size_t field_size, char* field, size_t value_size, char* value);
VOIDCSFML_API http_request_setmethod_1ct(void* self, int method);
VOIDCSFML_API http_request_seturi_zkC(void* self, size_t uri_size, char* uri);
VOIDCSFML_API http_request_sethttpversion_emSemS(void* self, unsigned int major, unsigned int minor);
VOIDCSFML_API http_request_setbody_zkC(void* self, size_t body_size, char* body);
VOIDCSFML_API http_request_initialize_Jat(void* self, void* copy);
VOIDCSFML_API http_response_initialize(void* self);
VOIDCSFML_API http_response_getfield_zkC(void* self, size_t field_size, char* field, char** result);
VOIDCSFML_API http_response_getstatus(void* self, int* result);
VOIDCSFML_API http_response_getmajorhttpversion(void* self, unsigned int* result);
VOIDCSFML_API http_response_getminorhttpversion(void* self, unsigned int* result);
VOIDCSFML_API http_response_getbody(void* self, char** result);
VOIDCSFML_API http_response_initialize_N50(void* self, void* copy);
VOIDCSFML_API http_initialize(void* self);
VOIDCSFML_API http_initialize_zkCbxi(void* self, size_t host_size, char* host, unsigned short port);
VOIDCSFML_API http_sethost_zkCbxi(void* self, size_t host_size, char* host, unsigned short port);
VOIDCSFML_API http_sendrequest_Jatf4T(void* self, void* request, void* timeout, void* result);
VOIDCSFML_API packet_initialize(void* self);
VOIDCSFML_API packet_finalize(void* self);
VOIDCSFML_API packet_append_5h8vgv(void* self, void* data, size_t size_in_bytes);
VOIDCSFML_API packet_clear(void* self);
VOIDCSFML_API packet_getdata(void* self, void** result);
VOIDCSFML_API packet_getdatasize(void* self, size_t* result);
VOIDCSFML_API packet_endofpacket(void* self, unsigned char* result);
VOIDCSFML_API packet_operator_shl_GZq(void* self, unsigned char data, void* result);
VOIDCSFML_API packet_operator_shl_k6g(void* self, int8_t data, void* result);
VOIDCSFML_API packet_operator_shl_9yU(void* self, uint8_t data, void* result);
VOIDCSFML_API packet_operator_shl_yAA(void* self, int16_t data, void* result);
VOIDCSFML_API packet_operator_shl_BtU(void* self, uint16_t data, void* result);
VOIDCSFML_API packet_operator_shl_qe2(void* self, int32_t data, void* result);
VOIDCSFML_API packet_operator_shl_saL(void* self, uint32_t data, void* result);
VOIDCSFML_API packet_operator_shl_G4x(void* self, int64_t data, void* result);
VOIDCSFML_API packet_operator_shl_Jvt(void* self, uint64_t data, void* result);
VOIDCSFML_API packet_operator_shl_Bw9(void* self, float data, void* result);
VOIDCSFML_API packet_operator_shl_mYt(void* self, double data, void* result);
VOIDCSFML_API packet_operator_shl_Yy6(void* self, char* data, void* result);
VOIDCSFML_API packet_operator_shl_zkC(void* self, size_t data_size, char* data, void* result);
VOIDCSFML_API packet_operator_shl_bQs(void* self, size_t data_size, uint32_t* data, void* result);
VOIDCSFML_API packet_initialize_54U(void* self, void* copy);
VOIDCSFML_API socketselector_initialize(void* self);
VOIDCSFML_API socketselector_finalize(void* self);
VOIDCSFML_API socketselector_add_JTp(void* self, void* socket);
VOIDCSFML_API socketselector_remove_JTp(void* self, void* socket);
VOIDCSFML_API socketselector_clear(void* self);
VOIDCSFML_API socketselector_wait_f4T(void* self, void* timeout, unsigned char* result);
VOIDCSFML_API socketselector_isready_JTp(void* self, void* socket, unsigned char* result);
VOIDCSFML_API socketselector_initialize_fWq(void* self, void* copy);
VOIDCSFML_API tcplistener_initialize(void* self);
VOIDCSFML_API tcplistener_getlocalport(void* self, unsigned short* result);
VOIDCSFML_API tcplistener_listen_bxi(void* self, unsigned short port, int* result);
VOIDCSFML_API tcplistener_close(void* self);
VOIDCSFML_API tcplistener_accept_WsF(void* self, void* socket, int* result);
VOIDCSFML_API tcplistener_setblocking_GZq(void* self, unsigned char blocking);
VOIDCSFML_API tcplistener_isblocking(void* self, unsigned char* result);
VOIDCSFML_API udpsocket_initialize(void* self);
VOIDCSFML_API udpsocket_getlocalport(void* self, unsigned short* result);
VOIDCSFML_API udpsocket_bind_bxi(void* self, unsigned short port, int* result);
VOIDCSFML_API udpsocket_unbind(void* self);
VOIDCSFML_API udpsocket_send_5h8vgvBfEbxi(void* self, void* data, size_t size, void* remote_address, unsigned short remote_port, int* result);
VOIDCSFML_API udpsocket_receive_xALvgvi499ylYII(void* self, void* data, size_t size, size_t* received, void* remote_address, unsigned short* remote_port, int* result);
VOIDCSFML_API udpsocket_send_jyFBfEbxi(void* self, void* packet, void* remote_address, unsigned short remote_port, int* result);
VOIDCSFML_API udpsocket_receive_jyF9ylYII(void* self, void* packet, void* remote_address, unsigned short* remote_port, int* result);
VOIDCSFML_API udpsocket_setblocking_GZq(void* self, unsigned char blocking);
VOIDCSFML_API udpsocket_isblocking(void* self, unsigned char* result);
#endif
